from typing import Dict, List, Optional, Tuple, Any
from datetime import datetime 
from eth_typing import HexStr
from eth_pydantic_types import HexBytes
from ape import Contract, chain
from src.framework.data import DataCollector
from src.framework.logging import get_logger

logger = get_logger(__name__)

class {{ contract_name }}Client:
    """Client interface for {{ contract_name }} contract"""
    
    def __init__(
        self,
        contract_address: str,
        abi_path: str,
        gas_limits: Optional[Dict] = None,
        data_collector: Optional['DataCollector'] = None
    ):
        self.contract = Contract(contract_address, abi=abi_path)
        self.collector = data_collector
        
        # Default gas limits
        self.gas_limits = gas_limits or {
            {% for func in functions %}
            '{{ func.name }}': 300000,
            {% endfor %}
        }
        
    {% for func in functions %}
    {% if func.is_view %}
    def {{ func.name }}(self, {{ func.get_python_param_defs() }}) -> {{ func.get_python_return_type() }}:
        """{{ func.name }} implementation
        {% for inp in func.inputs %}
        Args:
            {{ inp.name }}: {{ inp.type }} - Contract parameter
        {% endfor %}
        """
        try:
            return self.contract.{{ func.name }}({{ func.get_python_params() }})
        except Exception as e:
            logger.error(f"{{ func.name }} failed: {e}")
            return None
    {% else %}
    def {{ func.name }}(self, sender: str, value: int{% if func.get_python_param_defs() %}, {{ func.get_renamed_param_defs() }}{% endif %}, context: Optional['SimulationContext'] = None) -> bool:
        """{{ func.name }} implementation

        Args:
            sender: Address initiating the transaction
            value: Value in wei to send with transaction
            {% for inp in func.inputs %}
            {{ inp.name|safe_param_name }}: {{ inp.type }} - Contract parameter
            {% endfor %}
        """
        try:
            tx = self.contract.{{ func.name }}(
                {% if func.get_python_params() %}{{ func.get_safe_params() }}, {% endif %}
                sender=sender,
                value=value
            )
            success = bool(tx and tx.status == 1)
            if success:
                # Record events if collector exists
                if self.collector:
                    self.collector.record_transaction_events(tx, context)
                
                # Get simulation from context if it exists
                if context and context.simulation:
                    context.simulation.update_state_from_transaction(tx, context)
            return success
        except Exception as e:
            logger.error(f"{{ func.name }} failed: {e}")
            return False
    {% endif %}
    {% endfor %}